#include "TMath.h"
#include "TFile.h"
#include "TChain.h"
#include "TTree.h"
#include "tDVCS.C"

#include <iostream>
#include <sstream>
#include <fstream>
#include <string>
#include <map>

std::map<Double_t, bool> goodruns;

void GoodRunSet(){

  const char* path = "/u/home/bclary/eg1analysis/SKIMprotocol/analysiscode_v2.2/fcup_analysis/GoodRunsGroupB.txt";
  std::ifstream myfile;
  myfile.open(path,std::ios_base::in);

  std::string line;

  if( myfile.is_open() ){

    while ( getline(myfile,line) ){
      if( line[0] == '#' ) continue;
      
      double run, fc0, fc1;
      std::stringstream first(line);
      first >> run >> fc0 >> fc1;
      goodruns[run] = true;
      
    }

  }

}


void asym( const char* rootfile ){

  TChain *fchain = new TChain("tDVCS");
  fchain->Add(rootfile);

  tDVCS *treevar = new tDVCS(fchain);


  TH1D* h_PP = new TH1D("h_PP","",10,0,360);
  TH1D* h_PN = new TH1D("h_PN","",10,0,360);
  TH1D* h_NP = new TH1D("h_NP","",10,0,360);
  TH1D* h_NN = new TH1D("h_NN","",10,0,360);

  GoodRunSet();

  for( Long64_t nn = 0; nn < fchain->GetEntries(); nn++ ){
    fchain->GetEntry(nn);
    
    //Work with only run group B and NH3 targets for now. Can be changed later
    std::string target = (std::string)(*treevar->TargetType);
    if( *treevar->PeriodID == 'B'
	&& (target == "NH3T" || target == "NH3B" || target == "NH3S") 
	&& goodruns[treevar->RunNumber] ){
      
      Int_t hel = treevar->helicity;
      Float_t tarpol = treevar->TarPol;

      if( tarpol > 0 && hel == 0 ){
	h_PP->Fill( (treevar->Phi)*(180.0/TMath::Pi()) );
      }
      if( tarpol > 0 && hel == 1){
	h_PN->Fill( (treevar->Phi)*(180.0/TMath::Pi()) );
      }
      if( tarpol < 0 && hel == 0 ){
	h_NP->Fill( (treevar->Phi)*(180.0/TMath::Pi()) );
      }
      if( tarpol < 0 && hel == 1){
	h_NN->Fill( (treevar->Phi)*(180.0/TMath::Pi()) );
      }
    }
  }

  TH1D *h_PPPN = new TH1D("h_PPPN","",10,0,360);
  TH1D *h_NPNN = new TH1D("h_NPNN","",10,0,360);
  TH1D *h_top = new TH1D("h_top","",10,0,360);
  TH1D *h_bot = new TH1D("h_bot","",10,0,360);
  
  TCanvas *c1 = new TCanvas("c1","canvas",1600,800);
  c1->Divide(2,2);
  c1->cd(1);
  h_PPPN->Add(h_PP,h_PN,1.0,1.0);
  h_PPPN->Draw();
  c1->cd(2);
  h_NPNN->Add(h_NP,h_NN,1.0,1.0);
  h_NPNN->Draw();  
  c1->cd(3);
  h_top->Add(h_PPPN,h_NPNN,1.0,-1.0);
  h_bot->Add(h_PPPN,h_NPNN,1.0,1.0);
  h_asym->Divide(h_top,h_bot,1.0,1.0);
  h_asym->Draw();
  c1->cd(4);
  h_NN->Draw();
  
  std::cout << " Done " << std::endl;  
}
